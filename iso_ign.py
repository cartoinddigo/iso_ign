# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IsoIGN
                                 A QGIS plugin
 Extraction de zone de chalandises et calcul d'itinéraires depuis l'API itineraire.ign.fr
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-20
        git sha              : $Format:%H$
        copyright            : (C) 2022 by T.Jacquemot
        email                : t.jacquemot@inddigo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from pathlib import Path
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsFeature,
    QgsGeometry,
    QgsCoordinateReferenceSystem,
    QgsCoordinateTransform,
    QgsField,
    QgsPoint,
)


# Import the code for the dialog
from .iso_ign_dialog import IsoIGNDialog
import os.path
import json, traceback

from PyQt5.Qt import QMessageBox

# from pickle import TRUE

try:
    import requests
except ModuleNotFoundError:
    print("installing requests")
    if platform.system() == "Windows":
        subprocess.call([sys.exec_prefix + "/python", "-m", "pip", "install", "requests"])
    else:
        subprocess.call(["python3", "-m", "pip", "install", "requests"])
    import requests

    try:
        import requests

        print("installation completed")
    except ModuleNotFoundError:
        QMessageBox.information(None, "ERROR", "Oops ! L'installation du module requests à échouée. Désolé de ne pas pouvoir aller plus loin...")

headers = {"User-Agent": "*"}

URL = "https://itineraire.ign.fr/simple/1.0.0/"


class IsoIGN:
    """Un Plugin QGIS pour calculer des aires de chalandises et recjercher des itinéraires à l'aide
    du Géoportail de l'IGN."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface and Project Instance
        self.iface = iface
        self.project = QgsProject.instance()

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(self.plugin_dir, "i18n", "IsoIGN_{}.qm".format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u"&IsoIGN")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("IsoIGN", message)

    def add_action(self, icon_path, text, callback, enabled_flag=True, add_to_menu=True, add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = Path(__file__).parent / "icon.png"
        self.add_action(str(icon_path), text=self.tr(u"IsoIGN"), callback=self.run, parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u"&IsoIGN"), action)
            self.iface.removeToolBarIcon(action)

    ########################################################################
    #                         Fonctions utiles                             #
    ########################################################################

    def get_bornes(self):
        self.u_bornes = self.iso_ign_windows.lineEdit_user_rq.text()

        self.u_bornes = self.u_bornes.replace(" ", "")
        if len(self.u_bornes) > 0:
            self.bornes = self.u_bornes.split(",")

            try:
                self.bornes = [int(i) if self.unit != "minutes" else int(i) * 60 for i in self.bornes]
            except ValueError:
                QMessageBox.warning(self.iso_ign_windows, "Oops !", "Les bornes doivent s'exprimer en chiffres")
                self.bornes = []
                return self.bornes

            return self.bornes
        else:
            QMessageBox.warning(self.iso_ign_windows, "Oops !", "Liste de bornes vide !")

    def get_param(self):

        if self.iso_ign_windows.radioButton_voiture.isChecked():
            self.reseau = "profile=car"
        elif self.iso_ign_windows.radioButton_pieton.isChecked():
            self.reseau = "profile=pedestrian"
        else:
            QMessageBox.warning(self.iso_ign_windows, "Oops !", "Veuillez choisir un type de réseau")

        if self.iso_ign_windows.radioButton_distance.isChecked():
            self.methode = "costType=distance&distanceUnit=meter"
            self.unit = "meter"
        elif self.iso_ign_windows.radioButton_temps.isChecked():
            self.methode = "costType=time&timeUnit=minute"
            self.unit = "minute"
        else:
            QMessageBox.warning(self.iso_ign_windows, "Oops !", "Veuillez choisir une méthode de calcul")

    def ask_ign(self, url):
        """fonction qui interroge le géoportail et qui retourne une géométrie"""
        # self.iso_ign_windows.consol.setText(url)
        self.resp = requests.get(url, headers=headers)
        self.iso_output = self.resp.json()
        self.iso_output_str = json.dumps(self.iso_output, sort_keys=True, indent=2)

        try:
            self.pgeom = self.iso_output["geometry"]
            # self.iso_ign_windows.consol.setText("ask_ign dit vraiment Bien !: /n{}".format(self.pgeom))
            return self.pgeom

        except Exception:
            self.iso_ign_windows.consol.setText("ask_ign bug. /n l'url /n{} dit : /n{}".format(url, str(self.iso_output)))

            return "bug"

    ########################################################################
    #                         Perform alg                                  #
    ########################################################################

    def perform_rq(self):

        # charge les paramètres de l'utilisateur
        try:
            self.get_param()
        except Exception:
            self.iso_ign_windows.consol.setText(traceback.format_exc())

        # test de la tab demandée
        if self.iso_ign_windows.tabWidget.currentWidget().objectName() == "tab_iso":

            ########################################################################
            #                         Mode Chalandises                             #
            ########################################################################

            # mode = "iso"
            try:
                rq_bornes = self.get_bornes()
            except Exception:
                self.iso_ign_windows.consol.setText(traceback.format_exc())

            if not rq_bornes:
                return
            # Reprojection en WGS84
            ori_layer = self.iface.activeLayer()

            selected_pt = ori_layer.selectedFeatures()
            if selected_pt:
                crsOri = ori_layer.crs()
                crsDest = QgsCoordinateReferenceSystem("EPSG:4326")
                xform = QgsCoordinateTransform(crsOri, crsDest, self.project)
                for pt in selected_pt:
                    ptt = pt.geometry()
                    ptt.transform(xform)
                    pt.setGeometry(ptt)
            else:
                QMessageBox.warning(self.iso_ign_windows, "Oops !", "Aucun point selectioné!")
                return

            # création du layer de résultats
            res_ly = QgsVectorLayer("Polygon", "chalandise", "memory")
            res_provider = res_ly.dataProvider()
            self.project.addMapLayer(res_ly)
            res_provider.addAttributes(ori_layer.fields())
            res_provider.addAttributes([QgsField("iso_cost", QVariant.Int)])
            res_provider.addAttributes([QgsField("iso_unit", QVariant.String)])
            res_ly.updateFields()

            # boucle sur les bornes utilisateur
            for borne in rq_bornes:
                # Boucle sur les points selectionné sur la carte
                for f in selected_pt:
                    res_feat = QgsFeature()
                    geom = f.geometry()
                    gx = geom.asPoint().x()
                    gy = geom.asPoint().y()
                    coord = "%f,%f" % (gx, gy)

                    # todo : création de l'url
                    point = coord  #
                    resource = "resource=bdtopo-pgr"
                    costValue = str(borne)
                    costType = self.methode
                    profile = self.reseau

                    urlq = (
                        URL
                        + "isochrone?"
                        + resource
                        + "&"
                        + profile
                        + "&"
                        + costType
                        + "&costValue="
                        + costValue
                        + "&point="
                        + point
                        + "&geometryFormat=geojson"
                    )

                    # rq = self.ask_iso(coord, self.methode, borne, self.reseau)
                    rq = self.ask_ign(urlq)
                    # self.iso_ign_windows.consol.setText(rq)

                    if rq == "bug":
                        #
                        wkt = "POLYGON ((0 0, 0 0, 0 0, 0 0))"
                    else:
                        for poly in rq["coordinates"]:
                            val = ""
                            for pt in poly:
                                bi = "%f %f, " % (pt[0], pt[1])
                                val += bi
                            wkt = rq["type"] + " " + "((" + val + "))"

                    res_feat_geom = QgsGeometry.fromWkt(wkt)
                    res_feat.setGeometry(res_feat_geom)
                    data = f.attributes()
                    data.append(borne)
                    data.append(self.unit)
                    res_feat.setAttributes(data)
                    res_provider.addFeature(res_feat)

                    res_ly.updateExtents()
                    self.iface.layerTreeView().refreshLayerSymbology(res_ly.id())
                    self.iso_ign_windows.consol.setText("ask_ign dit : <<J'ai bien calculé xx aires de chalandises !>>")

        ########################################################################
        #                         Mode Itinéraires                             #
        ########################################################################

        else:
            # mode = "iti"
            res_ly = QgsVectorLayer("Linestring", "itinéraire", "memory")
            self.project.addMapLayer(res_ly)
            res_provider = res_ly.dataProvider()

            # récupérer le mode de calcul
            methode_iti = self.iso_ign_windows.calciti_picker.currentIndex()
            self.iso_ign_windows.consol.setText(str(methode_iti))

            # création d'une liste les coord des origines:
            ly_ori = self.iso_ign_windows.orily_picker.currentLayer()
            selected_ori_pt = ly_ori.selectedFeatures()
            lst_coord_start = []
            if selected_ori_pt:
                crsOri = ly_ori.crs()
                crsDest = QgsCoordinateReferenceSystem("EPSG:4326")
                xform = QgsCoordinateTransform(crsOri, crsDest, self.project)
                for pt in selected_ori_pt:
                    ptt = pt.geometry()
                    ptt.transform(xform)
                    pt.setGeometry(ptt)

                    res_feat = QgsFeature()
                    geom = pt.geometry()
                    gx = geom.asPoint().x()
                    gy = geom.asPoint().y()
                    coord_start = "%f,%f" % (gx, gy)
                    lst_coord_start.append(coord_start)

            else:
                QMessageBox.warning(self.iso_ign_windows, "Oops !", "Aucune origine selectionée!")
                return

            # création d'une liste les coord des destinations:
            ly_dest = self.iso_ign_windows.destly_picker.currentLayer()
            selected_dest_pt = ly_dest.selectedFeatures()
            lst_coord_end = []
            if selected_dest_pt:
                crsOri = ly_dest.crs()
                crsDest = QgsCoordinateReferenceSystem("EPSG:4326")
                xform = QgsCoordinateTransform(crsOri, crsDest, self.project)
                for pt in selected_dest_pt:
                    ptt = pt.geometry()
                    ptt.transform(xform)
                    pt.setGeometry(ptt)
                    res_feat = QgsFeature()
                    geom = pt.geometry()
                    gx = geom.asPoint().x()
                    gy = geom.asPoint().y()
                    coord_end = "%f,%f" % (gx, gy)
                    lst_coord_end.append(coord_end)
            else:
                QMessageBox.warning(self.iso_ign_windows, "Oops !", "Aucune destination selectionée!")
                return

            # constantes necessaires à l'API IGN
            resource = "resource=bdtopo-pgr"
            costType = self.methode
            profile = self.reseau

            # Création de la liste d'OD
            lst_od = []
            for o in lst_coord_start:
                for d in lst_coord_end:
                    req_od = "&start={}&end={}".format(o, d)
                    lst_od.append(req_od)

            # Constructuin de l'URL et appel de l'API ING
            for od in lst_od:
                urlq = URL + "route?" + resource + "&" + profile + "&" + costType + od + "&geometryFormat=geojson"
                rq = self.ask_ign(urlq)

                # Parsage du geojson reçu
                if rq == "bug":
                    #
                    wkt = "LineString ((0 0, 0 0, 0 0, 0 0))"
                else:
                    val = ""
                    for pt in rq["coordinates"]:
                        bi = "%f %f, " % (pt[0], pt[1])
                        val += bi
                    wkt = rq["type"] + " " + "((" + val + "))"

                # Ajout des resultats dans le layer de resultats
                res_feat_geom = QgsGeometry.fromWkt(wkt)
                res_feat.setGeometry(res_feat_geom)
                res_provider.addFeature(res_feat)

                res_ly.updateExtents()
                self.iface.layerTreeView().refreshLayerSymbology(res_ly.id())
                self.iso_ign_windows.consol.setText("ask_ign dit : <<J'ai bien calculé xx itinéraires !>>")

            return

    def run(self):
        """Affiche la gui et paramétrages par défaut"""

        self.iso_ign_windows = IsoIGNDialog()
        self.iso_ign_windows.radioButton_pieton.setChecked(True)
        self.iso_ign_windows.radioButton_distance.setChecked(True)
        self.iso_ign_windows.consol.setText("Que voulez-vous faire ?")
        self.iso_ign_windows.bt_ok.clicked.connect(self.perform_rq)
        self.iso_ign_windows.show()
